import dj_database_url 
"""
Django settings for money_multiplier project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Only load .env file in local development, not in production
if os.getenv('ENVIRONMENT') != 'production':
    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if os.getenv('ENVIRONMENT') == 'local':
    SECRET_KEY = 'django-insecure-1*cjz4-m0lyfmo0@@3jg#m0xdl7ft3srpx(kk7ww6r8s*bb8ef'
else:
    SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-1*cjz4-m0lyfmo0@@3jg#m0xdl7ft3srpx(kk7ww6r8s*bb8ef')

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv('ENVIRONMENT') == 'local':
    DEBUG = True
else:
    DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

if os.getenv('ENVIRONMENT') == 'local':
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', '192.168.1.6', '*']
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', '.onrender.com', 'algotrading-backend.onrender.com', '.railway.app', '.up.railway.app', 'kite-algotrading-production.up.railway.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'trading',  # Your main app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # For serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'money_multiplier.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'money_multiplier.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Print environment debug info
print(f"DEBUG: ENVIRONMENT = {os.getenv('ENVIRONMENT')}")
print(f"DEBUG: DATABASE_URL exists = {bool(os.getenv('DATABASE_URL'))}")
print(f"DEBUG: DB_HOST = {os.getenv('DB_HOST')}")

# FORCE PRODUCTION DATABASE for Render.com deployment
# Check if we're on Render.com or if ENVIRONMENT is production
is_render = '.onrender.com' in os.getenv('RENDER_EXTERNAL_URL', '') or os.getenv('RENDER_SERVICE_NAME')
is_production = os.getenv('ENVIRONMENT', '').lower() == 'production'
environment = os.getenv('ENVIRONMENT', '').lower()

print(f"DEBUG: is_render = {is_render}")
print(f"DEBUG: is_production = {is_production}")
print(f"DEBUG: RENDER_EXTERNAL_URL = {os.getenv('RENDER_EXTERNAL_URL')}")

if environment == 'local' and not is_render and not is_production:
    print("DEBUG: Using SQLite for local development")
    # Use SQLite for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR.parent / 'db.sqlite3',
        }
    }
else:
    print("DEBUG: FORCING PostgreSQL for production/Render deployment")
    # FORCE PostgreSQL for production - override any local settings
    DATABASE_URL = os.getenv('DATABASE_URL')
    
    # Always construct DATABASE_URL for Render.com
    db_host = os.getenv('DB_HOST', 'dpg-d26hggjuibrs739ss0h0-a.oregon-postgres.render.com')
    db_port = os.getenv('DB_PORT', '5432')
    db_name = os.getenv('DB_NAME', 'algotrading_60j3')
    db_user = os.getenv('DB_USER', 'algotrading_user')
    db_password = os.getenv('DB_PASSWORD', 'KaVpfEyKnvm5g4buBl5tuizkvqoNYJ1x')
    
    if not DATABASE_URL:
        DATABASE_URL = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        print("DEBUG: Constructed DATABASE_URL from individual components")
    
    print(f"DEBUG: Using hardcoded production credentials for reliability")
    
    # ALWAYS use hardcoded production database to avoid any configuration issues
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': db_name,
            'USER': db_user,
            'PASSWORD': db_password,
            'HOST': db_host,
            'PORT': db_port,
            'OPTIONS': {
                'connect_timeout': 60,
                'sslmode': 'require',
            },
        }
    }
    
    print(f"DEBUG: Database HOST = {DATABASES['default']['HOST']}")
    print(f"DEBUG: Database NAME = {DATABASES['default']['NAME']}")
    print(f"DEBUG: Database USER = {DATABASES['default']['USER']}")
    print(f"DEBUG: Database PORT = {DATABASES['default']['PORT']}")

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
if os.getenv('ENVIRONMENT') == 'local':
    # Allow all origins during local development
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # Production - be more specific with allowed origins
    CORS_ALLOW_ALL_ORIGINS = False
    
    # Get CORS origins from environment variable or use defaults
    cors_origins_env = os.getenv('CORS_ALLOWED_ORIGINS', '')
    if cors_origins_env:
        CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_env.split(',')]
    else:
        CORS_ALLOWED_ORIGINS = [
            "https://algotrading-frontend.onrender.com",
            "https://kite-algotrading-production.up.railway.app",
            "https://algotrading-frontend.up.railway.app",
            "https://algotrading-frontend.railway.app",
        ]

# Local development origins (always included)
CORS_ALLOWED_ORIGINS_LOCAL = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://192.168.1.6:5173",
    "http://192.168.1.6:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

# Combine production and local origins
if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS.extend(CORS_ALLOWED_ORIGINS_LOCAL)

# Allow credentials to be included in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow specific headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
]

# Allow specific methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Preflight request cache time
CORS_PREFLIGHT_MAX_AGE = 86400

# CSRF settings for CORS
CSRF_TRUSTED_ORIGINS = [
    "https://algotrading-frontend.onrender.com",
    "https://kite-algotrading-production.up.railway.app",
    "https://algotrading-frontend.up.railway.app",
    "https://algotrading-frontend.railway.app",
    "http://localhost:3000",
    "http://localhost:5173",
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}
